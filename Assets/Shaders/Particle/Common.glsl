#define VCOUNT_POINT 1 //point
#define VCOUNT_LINE 2 //line
#define VCOUNT_QUAD 4 //quad
#define VCOUNT_ELLIPSE 5//circle

//type of emmission for all emitter types or points
#define EMT_TYPE_GRADUAL 0

//type of emissions for lines
#define EMT_TYPE_RAIN 1 //particles are fired with random angle wrt normal of line
#define EMT_TYPE_LAZER 2 //fires particles in a line in normal of line

//type of emissions for quads
#define EMT_TYPE_DUST 4
#define EMT_TYPE_DISINTEGRATE 5 // the tetricity block disintegrate

//presets for emitters
#define ALPHA_OVER_LIFETIME 0 //decreasing alpha over lifetime
#define SIZE_OVER_LIFETIME 1 //decreasing size over lifetime
#define ALPHA_SIZE_DECR_OVER_LIFETIME 2  //decreasing alpha and size over lifetime
#define ALPHA_SIZE_INCR_OVER_LIFETIME 3  //increasing alpha and size over lifetime

struct Emitter {
    vec4 vertices[8];  // 4 vec4s, each vec4 is 16 bytes, total 64 bytes
    vec4 col;          // 16 bytes
    vec3 pos;          // vec3
    vec3 vel;          // vec3
    vec3 size;         // vec3
    vec3 rot;
    vec3 angvel;

    float lifetime;         // 4 bytes
    float speed;            // 4 bytes

    float time;             // 4 bytes
    float frequency;        // 4 bytes

    int type;               // 4 bytes
    int vCount;             // 4 bytes
    int preset;             // 4 bytes
    int particlesPerFrame;  // 4 bytes

    bool alive;             // 1 byte (in practice, often treated as 4 bytes for alignment)
};

struct Particle {
    vec4 startCol;
    vec4 col;          // vec4

    vec3 startPos;
    vec3 pos;          // vec3
    
    vec3 startVel;
    vec3 vel;          // vec3
    
    vec3 startSize;
    vec3 size;         // vec3

    vec3 rot;
    vec3 angvel;

    float age;
    float lifetime;

    int emtIdx;
    bool alive;
};


//they are the same size owo
layout(std430, binding=11) buffer RandIdx //the index for Rands, increments every time random() is called
{ uint randIdx; };
layout(std430, binding=12) buffer Rands //list of random floats generated by the cpu
{ float RandomFloats[]; };  
layout( std430, binding=13 ) buffer Emts
{ Emitter Emitters[]; };
layout( std430, binding=10 ) buffer PctlsStrt
{ Particle ParticlesStart[]; };
layout( std430, binding=14 ) buffer Pctls
{ Particle Particles[]; };
layout(std430, binding = 15) buffer ParticleIndex {
    uint usableParticleCount;
};